[project]
name = "securnote"
version = "0.1.0"
description = "Cryptography project for educational purposes"
authors = [
    {name = "emreren"}
]
readme = "README.md"
requires-python = ">3.9.1,<4.0"
dependencies = [
    "cryptography (>=45.0.7,<46.0.0)",
    "fastapi (>=0.116.1,<0.117.0)",
    "uvicorn (>=0.35.0,<0.36.0)",
    "prometheus-client (>=0.20.0,<0.21.0)"
]

[project.scripts]
securnote = "securnote.__main__:main"
securnote-remote = "securnote.remote_cli:main"

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.24.0",
    "requests>=2.28.0"
]


# Code formatting and linting
[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["securnote"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=securnote",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=25",
    "--cov-config=pyproject.toml",
    "--strict-markers",
    "-v"
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
omit = [
    "securnote/cli.py",
    "securnote/remote_cli.py",
    "securnote/__main__.py",
    "securnote/web/*",
    "securnote/zkauth.py",
    "tests/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
